alias sudo='sudo -E '

function spotify_start {
	(/usr/bin/spotify --username bachivipul10@gmail.com --password bachani100 &> /dev/null &)
}

###################### IITD PROXY SETTINGS ########################
function xy {
    # Change IITD proxy in the command line.
    # Example : xy 22 ; will change proxy to btech
    local PROXY=$1
    if [ -z $PROXY ] || [ $PROXY = "no" ] || [ $PROXY = "NO" ]; then
        unset http_proxy
        unset https_proxy
        unset no_proxy
        unset HTTP_PROXY
        unset HTTPS_PROXY
        unset NO_PROXY
        unset FTP_PROXY
        unset ftp_proxy
        unset all_proxy
        unset ALL_PROXY
        alias apt="apt -o 'Acquire::http::Proxy=false' -o 'Acquire::https::Proxy=false'"
        echo "Removed all proxy"
    elif [ $PROXY = "f" ] || [ $PROXY = "free" ] || [[ $PROXY =~ ^[0-9][0-9]$ ]]; then
        local PORT="3128"
        if [ ! -z $2 ]; then
          PORT=$2
        fi

        local PROXY_SERVER="10.10.78.$PROXY:$PORT"
    	   if [ $PROXY = "f" ] || [ $PROXY = "free" ]; then
            PROXY_SERVER="ssh1.iitd.ac.in:$PORT"
    	   fi

        export http_proxy="http://$PROXY_SERVER"
        export https_proxy="https://$PROXY_SERVER"
        export no_proxy="127.0.0.1,localhost,.iitd.ac.in,.iitd.ernet.in"
        export HTTP_PROXY=$http_proxy
        export HTTPS_PROXY=$https_proxy
        export NO_PROXY=$no_proxy
        alias apt="apt -o 'Acquire::http::Proxy=$http_proxy' -o 'Acquire::https::Proxy=$https_proxy'"

        unset FTP_PROXY
        unset ftp_proxy
        unset all_proxy
        unset ALL_PROXY

        echo "Proxy changed to $PROXY_SERVER"
    else
            echo "Invalid argument"
    fi
}

# xy f # Change proxy to ssh1.iitd.ac.in:9000
# xy f 9082 # Change proxy to ssh1.iitd.ac.in:9082
# xy 22 # Change to proxy 22 (btech)

function xys {
    # spotify prefs
    local SPREF="$HOME/.config/spotify/prefs"

    # [Macbook] Change Wi-Fi proxy settings in the system preferences (requires sudo)
    local PROXY=$1
    if [ -z $PROXY ] || [ $PROXY = "no" ] || [ $PROXY = "NO" ]; then
        gsettings set org.gnome.system.proxy mode 'none'

	# remove spotify proxy
	# only change proxy mode to 1
	sed -i 's/network.proxy.mode=.*/network.proxy.mode=1/g' $SPREF


	echo "Removed all Wi-Fi proxy settings from Sytem proxy settings"
    elif [ $PROXY = "f" ] || [ $PROXY = "free" ] || [[ $PROXY =~ ^[0-9][0-9]$ ]]; then
        local PROXY_SERVER_DOMAIN="10.10.78.$PROXY"
        local PROXY_SERVER_PORT="3128"

        if [ $PROXY = "f" ] || [ $PROXY = "free" ]; then
            PROXY_SERVER_PORT="3128"
            if [ ! -z $2 ]; then
                PROXY_SERVER_PORT=$2
            fi
            PROXY_SERVER_DOMAIN="ssh1.iitd.ac.in"
        fi


        gsettings set org.gnome.system.proxy mode 'manual' ;
        gsettings set org.gnome.system.proxy.http host $PROXY_SERVER_DOMAIN;
        gsettings set org.gnome.system.proxy.http port $PROXY_SERVER_PORT;
        gsettings set org.gnome.system.proxy.https host $PROXY_SERVER_DOMAIN;
        gsettings set org.gnome.system.proxy.https port $PROXY_SERVER_PORT;
        gsettings reset org.gnome.system.proxy.ftp host;
        gsettings reset org.gnome.system.proxy.ftp port;
        gsettings reset org.gnome.system.proxy.socks host;
        gsettings reset org.gnome.system.proxy.socks port;
        gsettings set org.gnome.system.proxy ignore-hosts "['localhost', '127.0.0.0/8', '192.168.1.0/24', '.iitd.ac.in', '.iitd.ernet.in']"


	# change spotify proxy
	sed -i 's/network.proxy.mode=.*/network.proxy.mode=2/g' $SPREF
	sed -i 's/network.proxy.addr=.*/network.proxy.addr="'"$PROXY_SERVER_DOMAIN:$PROXY_SERVER_PORT"'@http"/g' $SPREF

        echo "Wi-Fi Proxy changed to $PROXY_SERVER_DOMAIN:$PROXY_SERVER_PORT"
    else
            echo "Invalid argument"
    fi
}

function xya {
    # Change proxy settings in both terminal and Wi-Fi system preferences
    xy "$@"
    xys "$@"
}

#####################################################################






# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
